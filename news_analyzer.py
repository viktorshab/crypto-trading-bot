#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram
–°–æ–±–∏—Ä–∞–µ—Ç BUY/SELL —Å–∏–≥–Ω–∞–ª—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Telegram –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
"""

import requests
from bs4 import BeautifulSoup
import json
import re
from datetime import datetime, timedelta
import time
import os
import logging
from urllib.parse import urljoin, urlparse, quote_plus
import hashlib
from collections import defaultdict, Counter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class TradingSignalBot:
    def __init__(self):
        # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.telegram_token = "8023307419:AAEepsXhohQJXZD1PLB5WJBxgu4DdqUco7s"
        self.telegram_user_id = "7463905425"
        self.telegram_api = f"https://api.telegram.org/bot{self.telegram_token}"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        })
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signal_sources = {
            'fear_greed': {
                'url': 'https://alternative.me/crypto/fear-and-greed-index/',
                'name': 'üò± Fear & Greed Index',
                'type': 'index'
            },
            'messari': {
                'url': 'https://messari.io/screener',
                'name': 'üìä Messari Ratings',
                'type': 'ratings'
            },
            'cryptorank': {
                'url': 'https://cryptorank.io/',
                'name': 'üèÜ CryptoRank',
                'type': 'rankings'
            },
            'tradingview_btc': {
                'url': 'https://www.tradingview.com/symbols/BTCUSDT/technicals/',
                'name': 'üìà TradingView BTC',
                'type': 'technical'
            },
            'tradingview_eth': {
                'url': 'https://www.tradingview.com/symbols/ETHUSDT/technicals/',
                'name': 'üìà TradingView ETH', 
                'type': 'technical'
            }
        }
        
        # –ö–µ—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self.processed_signals = self.load_processed_signals()
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signal_emojis = {
            'BUY': 'üü¢',
            'SELL': 'üî¥', 
            'HOLD': 'üü°',
            'STRONG_BUY': 'üíö',
            'STRONG_SELL': '‚ù§Ô∏è',
            'NEUTRAL': '‚ö™'
        }
        
    def load_processed_signals(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            with open('processed_signals.json', 'r') as f:
                return set(json.load(f))
        except FileNotFoundError:
            return set()
    
    def save_processed_signals(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        with open('processed_signals.json', 'w') as f:
            json.dump(list(self.processed_signals), f)
    
    def send_telegram_message(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(message) > 4000:
                message = message[:3950] + "\n\n‚úÇÔ∏è *–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ*"
            
            url = f"{self.telegram_api}/sendMessage"
            payload = {
                'chat_id': self.telegram_user_id,
                'text': message,
                'parse_mode': 'Markdown',
                'disable_web_page_preview': True
            }
            
            response = requests.post(url, json=payload, timeout=10)
            response.raise_for_status()
            
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
    
    def get_fear_greed_index(self):
        """–ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏"""
        try:
            url = "https://api.alternative.me/fng/"
            response = self.session.get(url, timeout=10)
            data = response.json()
            
            if data['data']:
                value = int(data['data'][0]['value'])
                classification = data['data'][0]['value_classification']
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
                if value <= 25:
                    signal = 'STRONG_BUY'
                    advice = '–í—Ä–µ–º—è –ø–æ–∫—É–ø–∞—Ç—å! –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö'
                elif value <= 45:
                    signal = 'BUY'
                    advice = '–•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏'
                elif value >= 75:
                    signal = 'SELL'
                    advice = '–û—Å—Ç–æ—Ä–æ–∂–Ω–æ! –†—ã–Ω–æ–∫ –≤ –∂–∞–¥–Ω–æ—Å—Ç–∏'
                else:
                    signal = 'NEUTRAL'
                    advice = '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞'
                
                return {
                    'source': 'üò± Fear & Greed',
                    'signal': signal,
                    'value': f"{value}/100",
                    'description': classification,
                    'advice': advice,
                    'timestamp': datetime.now().isoformat()
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Fear & Greed: {e}")
        
        return None
    
    def get_tradingview_signals(self, symbol='BTCUSDT'):
        """–ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å TradingView (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω–æ–µ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            url = f"https://scanner.tradingview.com/crypto/scan"
            
            payload = {
                "filter": [{"left": "name", "operation": "match", "right": symbol}],
                "columns": ["name", "Recommend.All", "RSI", "MACD.macd", "close"]
            }
            
            response = self.session.post(url, json=payload, timeout=15)
            data = response.json()
            
            if data.get('data') and len(data['data']) > 0:
                row = data['data'][0]
                recommendation = row['d'][1]  # –û–±—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
                rsi = row['d'][2]
                price = row['d'][4]
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ —Å–∏–≥–Ω–∞–ª
                if recommendation > 0.5:
                    signal = 'BUY'
                elif recommendation > 0.1:
                    signal = 'HOLD'
                elif recommendation < -0.5:
                    signal = 'SELL'
                else:
                    signal = 'NEUTRAL'
                
                return {
                    'source': f'üìà TradingView {symbol[:3]}',
                    'symbol': symbol,
                    'signal': signal,
                    'price': f"${price:,.2f}",
                    'rsi': f"{rsi:.1f}",
                    'recommendation': f"{recommendation:.2f}",
                    'timestamp': datetime.now().isoformat()
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TradingView —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol}: {e}")
        
        return None
    
    def get_simple_price_signals(self):
        """–ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ü–µ–Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        signals = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º
            url = "https://api.coingecko.com/api/v3/coins/markets"
            params = {
                'vs_currency': 'usd',
                'order': 'market_cap_desc',
                'per_page': 10,
                'page': 1,
                'sparkline': False,
                'price_change_percentage': '24h'
            }
            
            response = self.session.get(url, params=params, timeout=10)
            data = response.json()
            
            for coin in data[:5]:  # –¢–æ–ø 5 –º–æ–Ω–µ—Ç
                change_24h = coin.get('price_change_percentage_24h', 0)
                price = coin.get('current_price', 0)
                name = coin.get('name', '')
                symbol = coin.get('symbol', '').upper()
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                if change_24h > 10:
                    signal = 'STRONG_BUY'
                    advice = f"–°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç +{change_24h:.1f}%"
                elif change_24h > 5:
                    signal = 'BUY'
                    advice = f"–†–æ—Å—Ç +{change_24h:.1f}%"
                elif change_24h < -10:
                    signal = 'STRONG_SELL'
                    advice = f"–°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ {change_24h:.1f}%"
                elif change_24h < -5:
                    signal = 'SELL'
                    advice = f"–ü–∞–¥–µ–Ω–∏–µ {change_24h:.1f}%"
                else:
                    signal = 'NEUTRAL'
                    advice = f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ {change_24h:.1f}%"
                
                signals.append({
                    'source': 'üí∞ Price Alert',
                    'symbol': symbol,
                    'name': name,
                    'signal': signal,
                    'price': f"${price:,.2f}",
                    'change_24h': f"{change_24h:.1f}%",
                    'advice': advice,
                    'timestamp': datetime.now().isoformat()
                })
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        
        return signals
    
    def collect_all_signals(self):
        """–°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        all_signals = []
        
        logger.info("üîç –°–æ–±–∏—Ä–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã...")
        
        # 1. Fear & Greed Index
        logger.info("üìä –ü–æ–ª—É—á–∞–µ–º Fear & Greed Index...")
        fg_signal = self.get_fear_greed_index()
        if fg_signal:
            all_signals.append(fg_signal)
        
        # 2. TradingView —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è BTC –∏ ETH
        logger.info("üìà –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã TradingView...")
        for symbol in ['BTCUSDT', 'ETHUSDT']:
            tv_signal = self.get_tradingview_signals(symbol)
            if tv_signal:
                all_signals.append(tv_signal)
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        # 3. –ü—Ä–æ—Å—Ç—ã–µ —Ü–µ–Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        logger.info("üí∞ –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã...")
        price_signals = self.get_simple_price_signals()
        all_signals.extend(price_signals)
        
        logger.info(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(all_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        return all_signals
    
    def filter_new_signals(self, signals):
        """–§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        new_signals = []
        
        for signal in signals:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
            signal_key = f"{signal['source']}_{signal.get('symbol', '')}_{signal['signal']}"
            signal_hash = hashlib.md5(signal_key.encode()).hexdigest()
            
            if signal_hash not in self.processed_signals:
                new_signals.append(signal)
                self.processed_signals.add(signal_hash)
        
        return new_signals
    
    def format_telegram_message(self, signals):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram"""
        if not signals:
            return None
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–µ–º
        current_time = datetime.now().strftime("%H:%M %d.%m.%Y")
        message = f"üöÄ *–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã* {current_time}\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Ç–∏–ø—É
        strong_signals = []
        regular_signals = []
        info_signals = []
        
        for signal in signals:
            if signal['signal'] in ['STRONG_BUY', 'STRONG_SELL']:
                strong_signals.append(signal)
            elif signal['signal'] in ['BUY', 'SELL']:
                regular_signals.append(signal)
            else:
                info_signals.append(signal)
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        if strong_signals:
            message += "üî• *–°–ò–õ–¨–ù–´–ï –°–ò–ì–ù–ê–õ–´:*\n"
            for signal in strong_signals:
                emoji = self.signal_emojis.get(signal['signal'], '‚ö™')
                message += f"{emoji} *{signal['source']}*\n"
                
                if 'symbol' in signal:
                    message += f"   üíé {signal['symbol']} - {signal.get('price', 'N/A')}\n"
                
                message += f"   üìä –°–∏–≥–Ω–∞–ª: *{signal['signal']}*\n"
                
                if 'advice' in signal:
                    message += f"   üí° {signal['advice']}\n"
                elif 'change_24h' in signal:
                    message += f"   üìà 24—á: {signal['change_24h']}\n"
                
                message += "\n"
        
        # –û–±—ã—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        if regular_signals:
            message += "üìä *–û–ë–´–ß–ù–´–ï –°–ò–ì–ù–ê–õ–´:*\n"
            for signal in regular_signals:
                emoji = self.signal_emojis.get(signal['signal'], '‚ö™')
                message += f"{emoji} {signal['source']}"
                
                if 'symbol' in signal:
                    message += f" | {signal['symbol']}: {signal.get('price', 'N/A')}"
                
                if 'change_24h' in signal:
                    message += f" ({signal['change_24h']})"
                
                message += "\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–∫—Ä–∞—Ç–∫–æ)
        if info_signals:
            message += "\nüìã *–û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:*\n"
            for signal in info_signals:
                if 'value' in signal:  # Fear & Greed
                    message += f"üò± –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞: {signal['value']} - {signal['description']}\n"
        
        message += f"\n‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω"
        
        return message
    
    def save_signals_to_file(self, signals):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M')
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open(f'signals_{timestamp}.json', 'w', encoding='utf-8') as f:
            json.dump(signals, f, ensure_ascii=False, indent=2)
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        with open('latest_signals.json', 'w', encoding='utf-8') as f:
            json.dump(signals, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üíæ –°–∏–≥–Ω–∞–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: signals_{timestamp}.json")
    
    def run_analysis(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        try:
            # –°–æ–±–∏—Ä–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            all_signals = self.collect_all_signals()
            
            if not all_signals:
                logger.warning("‚ö†Ô∏è –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            new_signals = self.filter_new_signals(all_signals)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã
            self.save_signals_to_file(all_signals)
            self.save_processed_signals()
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            if new_signals:
                message = self.format_telegram_message(new_signals)
                if message:
                    self.send_telegram_message(message)
                    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(new_signals)} –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
                else:
                    logger.info("üìù –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É, –µ—Å–ª–∏ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç
                summary_message = f"üìä *–°–≤–æ–¥–∫–∞ {datetime.now().strftime('%H:%M')}*\n\n"
                summary_message += f"–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(all_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤\n"
                summary_message += "üîÑ –ù–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç\n\n"
                summary_message += "‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 30 –º–∏–Ω"
                
                self.send_telegram_message(summary_message)
                logger.info("üìã –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–≤–æ–¥–∫–∞ (–Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç)")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
            logger.error(error_msg)
            self.send_telegram_message(f"üö® *–û—à–∏–±–∫–∞ –±–æ—Ç–∞:*\n{error_msg}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TradingSignalBot()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
    logger.info("üîå –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
    test_message = f"ü§ñ *–ë–æ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω!*\n\n‚è∞ {datetime.now().strftime('%H:%M %d.%m.%Y')}\n\nüì° –ü–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥..."
    
    if bot.send_telegram_message(test_message):
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram!")
        return
    
    if os.getenv('GITHUB_ACTIONS'):
        # –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –≤ GitHub Actions
        logger.info("üöÄ GitHub Actions —Ä–µ–∂–∏–º - –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫")
        time.sleep(30)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        bot.run_analysis()
    else:
        # –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        logger.info("üîÑ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç")
        time.sleep(30)  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        
        while True:
            try:
                bot.run_analysis()
                logger.info("üò¥ –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ (30 –º–∏–Ω—É—Ç)...")
                time.sleep(1800)  # 30 –º–∏–Ω—É—Ç = 1800 —Å–µ–∫—É–Ω–¥
            except KeyboardInterrupt:
                logger.info("üëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
                bot.send_telegram_message("üõë *–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*\n\n–î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã")
                break
            except Exception as e:
                error_msg = f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
                logger.error(error_msg)
                bot.send_telegram_message(f"üö® *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞:*\n{error_msg}\n\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç...")
                time.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º

if __name__ == "__main__":
    main()
