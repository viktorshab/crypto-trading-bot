#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram
–°–æ–±–∏—Ä–∞–µ—Ç BUY/SELL —Å–∏–≥–Ω–∞–ª—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Telegram –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
"""

import requests
from bs4 import BeautifulSoup
import json
import re
from datetime import datetime, timedelta
import time
import os
import logging
from urllib.parse import urljoin, urlparse, quote_plus
import hashlib
from collections import defaultdict, Counter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class TradingSignalBot:
    def __init__(self):
        # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.telegram_token = "8023307419:AAEepsXhohQJXZD1PLB5WJBxgu4DdqUco7s"
        self.telegram_user_id = "7463905425"
        self.telegram_api = f"https://api.telegram.org/bot{self.telegram_token}"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        })
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signal_sources = {
            'fear_greed': {
                'url': 'https://alternative.me/crypto/fear-and-greed-index/',
                'name': 'üò± Fear & Greed Index',
                'type': 'index'
            },
            'messari': {
                'url': 'https://messari.io/screener',
                'name': 'üìä Messari Ratings',
                'type': 'ratings'
            },
            'cryptorank': {
                'url': 'https://cryptorank.io/',
                'name': 'üèÜ CryptoRank',
                'type': 'rankings'
            },
            'tradingview_btc': {
                'url': 'https://www.tradingview.com/symbols/BTCUSDT/technicals/',
                'name': 'üìà TradingView BTC',
                'type': 'technical'
            },
            'tradingview_eth': {
                'url': 'https://www.tradingview.com/symbols/ETHUSDT/technicals/',
                'name': 'üìà TradingView ETH', 
                'type': 'technical'
            }
        }
        
        # –ö–µ—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self.processed_signals = self.load_processed_signals()
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signal_emojis = {
            'BUY': 'üü¢',
            'SELL': 'üî¥', 
            'HOLD': 'üü°',
            'STRONG_BUY': 'üíö',
            'STRONG_SELL': '‚ù§Ô∏è',
            'NEUTRAL': '‚ö™'
        }
        
    def load_processed_signals(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            with open('processed_signals.json', 'r') as f:
                return set(json.load(f))
        except FileNotFoundError:
            return set()
    
    def save_processed_signals(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        with open('processed_signals.json', 'w') as f:
            json.dump(list(self.processed_signals), f)
    
    def send_telegram_message(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        try:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(message) > 4000:
                message = message[:3950] + "\n\n‚úÇÔ∏è *–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ*"
            
            url = f"{self.telegram_api}/sendMessage"
            payload = {
                'chat_id': self.telegram_user_id,
                'text': message,
                'parse_mode': 'Markdown',
                'disable_web_page_preview': True
            }
            
            response = requests.post(url, json=payload, timeout=10)
            response.raise_for_status()
            
            logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
    
    def get_fear_greed_index(self):
        """–ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏"""
        try:
            url = "https://api.alternative.me/fng/"
            response = self.session.get(url, timeout=10)
            data = response.json()
            
            if data['data']:
                value = int(data['data'][0]['value'])
                classification = data['data'][0]['value_classification']
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
                if value <= 25:
                    signal = 'STRONG_BUY'
                    advice = '–í—Ä–µ–º—è –ø–æ–∫—É–ø–∞—Ç—å! –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö'
                elif value <= 45:
                    signal = 'BUY'
                    advice = '–•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏'
                elif value >= 75:
                    signal = 'SELL'
                    advice = '–û—Å—Ç–æ—Ä–æ–∂–Ω–æ! –†—ã–Ω–æ–∫ –≤ –∂–∞–¥–Ω–æ—Å—Ç–∏'
                else:
                    signal = 'NEUTRAL'
                    advice = '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞'
                
                return {
                    'source': 'üò± Fear & Greed',
                    'signal': signal,
                    'value': f"{value}/100",
                    'description': classification,
                    'advice': advice,
                    'timestamp': datetime.now().isoformat()
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Fear & Greed: {e}")
        
        return None
    
    def get_tradingview_signals(self, symbol='BTCUSDT'):
        """–ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å TradingView (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω–æ–µ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            url = f"https://scanner.tradingview.com/crypto/scan"
            
            payload = {
                "filter": [{"left": "name", "operation": "match", "right": symbol}],
                "columns": ["name", "Recommend.All", "RSI", "MACD.macd", "close"]
            }
            
            response = self.session.post(url, json=payload, timeout=15)
            data = response.json()
            
            if data.get('data') and len(data['data']) > 0:
                row = data['data'][0]
                recommendation = row['d'][1]  # –û–±—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
                rsi = row['d'][2]
                price = row['d'][4]
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ —Å–∏–≥–Ω–∞–ª
                if recommendation > 0.5:
                    signal = 'BUY'
                elif recommendation > 0.1:
                    signal = 'HOLD'
                elif recommendation < -0.5:
                    signal = 'SELL'
                else:
                    signal = 'NEUTRAL'
                
                return {
                    'source': f'üìà TradingView {symbol[:3]}',
                    'symbol': symbol,
                    'signal': signal,
                    'price': f"${price:,.2f}",
                    'rsi': f"{rsi:.1f}",
                    'recommendation': f"{recommendation:.2f}",
                    'timestamp': datetime.now().isoformat()
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TradingView —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol}: {e}")
        
        return None
    
    def get_enhanced_market_data(self):
        """–ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        market_data = {
            'coins': [],
            'global_metrics': {},
            'hot_signals': [],
            'defi_metrics': {}
        }
        
        try:
            # 1. –¢–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            url = "https://api.coingecko.com/api/v3/coins/markets"
            params = {
                'vs_currency': 'usd',
                'order': 'market_cap_desc',
                'per_page': 15,
                'page': 1,
                'sparkline': False,
                'price_change_percentage': '1h,24h,7d'
            }
            
            response = self.session.get(url, params=params, timeout=15)
            coins_data = response.json()
            
            for i, coin in enumerate(coins_data[:10], 1):
                change_1h = coin.get('price_change_percentage_1h_in_currency', 0) or 0
                change_24h = coin.get('price_change_percentage_24h', 0) or 0
                change_7d = coin.get('price_change_percentage_7d_in_currency', 0) or 0
                price = coin.get('current_price', 0)
                volume = coin.get('total_volume', 0)
                market_cap = coin.get('market_cap', 0)
                symbol = coin.get('symbol', '').upper()
                name = coin.get('name', '')
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
                if change_1h > 8:
                    signal_strength = 'STRONG_BUY'
                    signal_reason = f"üöÄ –†–∞–∫–µ—Ç–∞ +{change_1h:.1f}% –∑–∞ —á–∞—Å!"
                elif change_1h < -8:
                    signal_strength = 'STRONG_SELL'  
                    signal_reason = f"üí• –û–±–≤–∞–ª {change_1h:.1f}% –∑–∞ —á–∞—Å!"
                elif change_24h > 15:
                    signal_strength = 'BUY'
                    signal_reason = f"üìà –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç –∑–∞ –¥–µ–Ω—å"
                elif change_24h < -15:
                    signal_strength = 'SELL'
                    signal_reason = f"üìâ –°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å"
                else:
                    signal_strength = 'NEUTRAL'
                    signal_reason = None

                coin_data = {
                    'rank': i,
                    'symbol': symbol,
                    'name': name,
                    'price': price,
                    'change_1h': change_1h,
                    'change_24h': change_24h,
                    'change_7d': change_7d,
                    'volume': volume,
                    'market_cap': market_cap,
                    'signal': signal_strength,
                    'signal_reason': signal_reason
                }
                
                market_data['coins'].append(coin_data)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–æ—Ä—è—á–∏–µ —Å–∏–≥–Ω–∞–ª—ã
                if signal_strength in ['STRONG_BUY', 'STRONG_SELL'] and signal_reason:
                    market_data['hot_signals'].append({
                        'symbol': symbol,
                        'signal': signal_strength,
                        'reason': signal_reason,
                        'change_1h': change_1h,
                        'change_24h': change_24h
                    })
            
            # 2. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            global_url = "https://api.coingecko.com/api/v3/global"
            global_response = self.session.get(global_url, timeout=10)
            global_data = global_response.json()
            
            if 'data' in global_data:
                gd = global_data['data']
                market_data['global_metrics'] = {
                    'total_market_cap': gd.get('total_market_cap', {}).get('usd', 0),
                    'total_volume': gd.get('total_volume', {}).get('usd', 0),
                    'bitcoin_dominance': gd.get('market_cap_percentage', {}).get('bitcoin', 0),
                    'ethereum_dominance': gd.get('market_cap_percentage', {}).get('ethereum', 0),
                    'active_cryptocurrencies': gd.get('active_cryptocurrencies', 0)
                }
            
            # 3. DeFi –¥–∞–Ω–Ω—ã–µ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ, —Ç–∞–∫ –∫–∞–∫ DeFiPulse —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ ETH –∏ DeFi —Ç–æ–∫–µ–Ω–æ–≤
            defi_tokens = ['ethereum', 'uniswap', 'aave', 'compound-governance-token', 'curve-dao-token']
            defi_total_cap = 0
            
            for coin in coins_data:
                if coin.get('id') in defi_tokens:
                    defi_total_cap += coin.get('market_cap', 0)
            
            market_data['defi_metrics'] = {
                'estimated_tvl': defi_total_cap * 0.3,  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                'top_defi_change': sum([c.get('price_change_percentage_24h', 0) for c in coins_data[:5] if c.get('id') in defi_tokens]) / 5
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return market_data
    
    def get_simple_price_signals(self):
        """–ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ü–µ–Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã (—Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        market_data = self.get_enhanced_market_data()
        signals = []
        
        for coin in market_data['coins'][:5]:
            signals.append({
                'source': 'üí∞ Enhanced Price Alert',
                'symbol': coin['symbol'],
                'name': coin['name'],
                'signal': coin['signal'],
                'price': f"${coin['price']:,.2f}",
                'change_24h': f"{coin['change_24h']:.1f}%",
                'volume': f"${coin['volume']/1e9:.1f}B" if coin['volume'] > 1e9 else f"${coin['volume']/1e6:.0f}M",
                'advice': coin['signal_reason'] or f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ {coin['change_24h']:.1f}%",
                'timestamp': datetime.now().isoformat()
            })
        
        return signals
    
    def collect_all_signals(self):
        """–°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        all_signals = []
        
        logger.info("üîç –°–æ–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã...")
        
        # 1. Fear & Greed Index
        logger.info("üìä –ü–æ–ª—É—á–∞–µ–º Fear & Greed Index...")
        fg_signal = self.get_fear_greed_index()
        if fg_signal:
            all_signals.append(fg_signal)
        
        # 2. TradingView —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä
        logger.info("üìà –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã TradingView...")
        trading_pairs = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'ADAUSDT']
        for symbol in trading_pairs[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã API
            tv_signal = self.get_tradingview_signals(symbol)
            if tv_signal:
                all_signals.append(tv_signal)
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        # 3. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
        logger.info("üí∞ –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        enhanced_price_signals = self.get_simple_price_signals()
        all_signals.extend(enhanced_price_signals)
        
        # 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        logger.info("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã...")
        market_indicators = self.get_market_indicators()
        all_signals.extend(market_indicators)
        
        logger.info(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(all_signals)} —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
        return all_signals
    
    def get_market_indicators(self):
        """–ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
        indicators = []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–º–∏–Ω–∞—Ü–∏–∏ Bitcoin
            url = "https://api.coingecko.com/api/v3/global"
            response = self.session.get(url, timeout=10)
            global_data = response.json()
            
            if 'data' in global_data:
                btc_dominance = global_data['data'].get('market_cap_percentage', {}).get('bitcoin', 0)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–º–∏–Ω–∞—Ü–∏—é Bitcoin
                if btc_dominance > 55:
                    signal = 'BTC_DOMINANCE_HIGH'
                    advice = f"–î–æ–º–∏–Ω–∞—Ü–∏—è BTC –≤—ã—Å–æ–∫–∞—è ({btc_dominance:.1f}%) - –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å –∞–ª—å—Ç–∫–æ–∏–Ω–∞–º–∏"
                elif btc_dominance < 45:
                    signal = 'ALTSEASON_POTENTIAL'
                    advice = f"–î–æ–º–∏–Ω–∞—Ü–∏—è BTC –Ω–∏–∑–∫–∞—è ({btc_dominance:.1f}%) - –≤–æ–∑–º–æ–∂–µ–Ω —Å–µ–∑–æ–Ω –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤"
                else:
                    signal = 'NEUTRAL'
                    advice = f"–î–æ–º–∏–Ω–∞—Ü–∏—è BTC –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è ({btc_dominance:.1f}%)"
                
                indicators.append({
                    'source': 'üëë Bitcoin Dominance',
                    'signal': signal,
                    'value': f"{btc_dominance:.1f}%",
                    'advice': advice,
                    'timestamp': datetime.now().isoformat()
                })
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø-–∫–æ–∏–Ω—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–æ–±—ã—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            market_data = self.get_enhanced_market_data()
            
            # –ò—â–µ–º –º–æ–Ω–µ—Ç—ã —Å –Ω–µ–æ–±—ã—á–Ω–æ –≤—ã—Å–æ–∫–∏–º –æ–±—ä–µ–º–æ–º —Ç–æ—Ä–≥–æ–≤
            if market_data['coins']:
                avg_volume = sum(c['volume'] for c in market_data['coins'][:10]) / 10
                
                for coin in market_data['coins'][:5]:
                    volume_ratio = coin['volume'] / avg_volume if avg_volume > 0 else 1
                    
                    if volume_ratio > 3 and coin['change_24h'] > 5:
                        indicators.append({
                            'source': 'üî• Volume Spike',
                            'signal': 'HIGH_VOLUME_PUMP',
                            'symbol': coin['symbol'],
                            'advice': f"{coin['symbol']} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–æ–±—ã—á–Ω–æ –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ ({volume_ratio:.1f}x –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ)",
                            'volume_ratio': volume_ratio,
                            'timestamp': datetime.now().isoformat()
                        })
                    elif volume_ratio > 3 and coin['change_24h'] < -5:
                        indicators.append({
                            'source': 'üìä Volume Alert',
                            'signal': 'HIGH_VOLUME_DUMP',
                            'symbol': coin['symbol'],
                            'advice': f"{coin['symbol']} –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂ - –≤–æ–∑–º–æ–∂–Ω–∞ –∫–∞–ø–∏—Ç—É–ª—è—Ü–∏—è",
                            'volume_ratio': volume_ratio,
                            'timestamp': datetime.now().isoformat()
                        })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        
        return indicators
    
    def filter_new_signals(self, signals):
        """–§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        new_signals = []
        
        for signal in signals:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
            signal_key = f"{signal['source']}_{signal.get('symbol', '')}_{signal['signal']}"
            signal_hash = hashlib.md5(signal_key.encode()).hexdigest()
            
            if signal_hash not in self.processed_signals:
                new_signals.append(signal)
                self.processed_signals.add(signal_hash)
        
        return new_signals
    
    def format_telegram_message(self, signals):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –†–ê–°–®–ò–†–ï–ù–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram"""
        if not signals:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        market_data = self.get_enhanced_market_data()
        
        current_time = datetime.now().strftime("%H:%M %d.%m.%Y")
        message = f"üìä *–ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–ù–´–ô –ê–ù–ê–õ–ò–ó* {current_time}\n\n"
        
        # 1. –¢–û–ü-5 –ú–û–ù–ï–¢ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        if market_data['coins']:
            message += "üí∞ *–¢–û–ü-5 –ú–û–ù–ï–¢:*\n"
            for coin in market_data['coins'][:5]:
                rank_emoji = ['ü•á', 'ü•à', 'ü•â', '4Ô∏è‚É£', '5Ô∏è‚É£'][coin['rank']-1]
                change_emoji = 'üìà' if coin['change_24h'] > 0 else 'üìâ' if coin['change_24h'] < 0 else '‚û°Ô∏è'
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
                if coin['volume'] > 1e9:
                    vol_str = f"{coin['volume']/1e9:.1f}B"
                elif coin['volume'] > 1e6:
                    vol_str = f"{coin['volume']/1e6:.0f}M"
                else:
                    vol_str = f"{coin['volume']/1e3:.0f}K"
                
                message += f"{rank_emoji} *{coin['symbol']}*: ${coin['price']:,.2f} "
                message += f"({coin['change_24h']:+.1f}%) {change_emoji}\n"
                message += f"   üìä 1—á: {coin['change_1h']:+.1f}% | 7–¥: {coin['change_7d']:+.1f}% | Vol: ${vol_str}\n"
            message += "\n"
        
        # 2. –ì–û–†–Ø–ß–ò–ï –°–ò–ì–ù–ê–õ–´
        hot_signals = market_data.get('hot_signals', [])
        strong_signals = [s for s in signals if s['signal'] in ['STRONG_BUY', 'STRONG_SELL']]
        
        if hot_signals or strong_signals:
            message += "üî• *–ì–û–†–Ø–ß–ò–ï –°–ò–ì–ù–ê–õ–´:*\n"
            
            # –ò–∑ market data
            for hot in hot_signals[:3]:
                emoji = self.signal_emojis.get(hot['signal'], '‚ö™')
                message += f"{emoji} *{hot['signal']}*: {hot['symbol']} "
                message += f"({hot['change_1h']:+.1f}% –∑–∞ 1—á)\n"
                message += f"   üí° {hot['reason']}\n"
            
            # –ò–∑ –æ–±—ã—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            for signal in strong_signals[:2]:
                emoji = self.signal_emojis.get(signal['signal'], '‚ö™')
                message += f"{emoji} *{signal['source']}*: {signal.get('symbol', 'N/A')}\n"
                if 'advice' in signal:
                    message += f"   üí° {signal['advice']}\n"
            
            message += "\n"
        
        # 3. –ò–ù–î–ò–ö–ê–¢–û–†–´ –†–´–ù–ö–ê
        message += "üò± *–ò–ù–î–ò–ö–ê–¢–û–†–´ –†–´–ù–ö–ê:*\n"
        
        # Fear & Greed
        fg_signal = next((s for s in signals if 'Fear & Greed' in s.get('source', '')), None)
        if fg_signal:
            message += f"‚Ä¢ Fear & Greed: {fg_signal.get('value', 'N/A')} ({fg_signal.get('description', 'N/A')})\n"
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if market_data['global_metrics']:
            gm = market_data['global_metrics']
            if gm.get('bitcoin_dominance'):
                message += f"‚Ä¢ Bitcoin Dominance: {gm['bitcoin_dominance']:.1f}%\n"
            if gm.get('total_market_cap'):
                cap_str = f"${gm['total_market_cap']/1e12:.1f}T" if gm['total_market_cap'] > 1e12 else f"${gm['total_market_cap']/1e9:.0f}B"
                message += f"‚Ä¢ Total Market Cap: {cap_str}\n"
            if gm.get('active_cryptocurrencies'):
                message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç: {gm['active_cryptocurrencies']:,}\n"
        
        message += "\n"
        
        # 4. –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó BTC/ETH
        btc_data = next((c for c in market_data['coins'] if c['symbol'] == 'BTC'), None)
        eth_data = next((c for c in market_data['coins'] if c['symbol'] == 'ETH'), None)
        
        if btc_data or eth_data:
            message += "üìà *–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:*\n"
            
            if btc_data:
                trend = "üü¢ –ë—ã—á–∏–π" if btc_data['change_24h'] > 2 else "üî¥ –ú–µ–¥–≤–µ–∂–∏–π" if btc_data['change_24h'] < -2 else "üü° –ë–æ–∫–æ–≤–∏–∫"
                message += f"‚Ä¢ *BTC*: {trend} —Ç—Ä–µ–Ω–¥, —Ü–µ–Ω–∞ ${btc_data['price']:,.0f}\n"
                
                # –ü—Ä–æ—Å—Ç—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                support = btc_data['price'] * 0.95
                resistance = btc_data['price'] * 1.05
                message += f"  –ü–æ–¥–¥–µ—Ä–∂–∫–∞: ${support:,.0f} | –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: ${resistance:,.0f}\n"
            
            if eth_data:
                trend = "üü¢ –ë—ã—á–∏–π" if eth_data['change_24h'] > 2 else "üî¥ –ú–µ–¥–≤–µ–∂–∏–π" if eth_data['change_24h'] < -2 else "üü° –ë–æ–∫–æ–≤–∏–∫"
                message += f"‚Ä¢ *ETH*: {trend} —Ç—Ä–µ–Ω–¥, —Ü–µ–Ω–∞ ${eth_data['price']:,.0f}\n"
            
            message += "\n"
        
        # 5. DEFI –ú–ï–¢–†–ò–ö–ò (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
        if market_data.get('defi_metrics') and market_data['defi_metrics'].get('estimated_tvl'):
            message += "üåç *DeFi –ú–ï–¢–†–ò–ö–ò:*\n"
            tvl = market_data['defi_metrics']['estimated_tvl']
            tvl_str = f"${tvl/1e9:.1f}B" if tvl > 1e9 else f"${tvl/1e6:.0f}M"
            message += f"‚Ä¢ Estimated TVL: {tvl_str}\n"
            
            defi_change = market_data['defi_metrics'].get('top_defi_change', 0)
            if defi_change:
                message += f"‚Ä¢ DeFi Trend: {defi_change:+.1f}% (24—á)\n"
            message += "\n"
        
        # 6. –û–ë–´–ß–ù–´–ï –°–ò–ì–ù–ê–õ–´ (–∫—Ä–∞—Ç–∫–æ)
        regular_signals = [s for s in signals if s['signal'] in ['BUY', 'SELL', 'HOLD']]
        if regular_signals:
            message += "üìä *–û–ë–´–ß–ù–´–ï –°–ò–ì–ù–ê–õ–´:*\n"
            for signal in regular_signals[:3]:
                emoji = self.signal_emojis.get(signal['signal'], '‚ö™')
                symbol_info = f" | {signal['symbol']}: {signal.get('price', 'N/A')}" if 'symbol' in signal else ""
                change_info = f" ({signal['change_24h']})" if 'change_24h' in signal else ""
                message += f"{emoji} {signal['source'].replace('üí∞ Enhanced Price Alert', 'üí∞ Price')}{symbol_info}{change_info}\n"
            message += "\n"
        
        # 7. –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –°–ò–ì–ù–ê–õ–´
        info_signals = [s for s in signals if s['signal'] in ['NEUTRAL'] and 'Fear & Greed' not in s.get('source', '')]
        if info_signals:
            message += "üìã *–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:*\n"
            for signal in info_signals[:2]:
                if 'TradingView' in signal.get('source', ''):
                    message += f"üìà {signal['source']}: {signal.get('recommendation', 'N/A')}\n"
            message += "\n"
        
        # 8. –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        message += f"‚è∞ *–°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω*\n"
        message += f"ü§ñ –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(signals)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"
        
        return message
    
    def save_signals_to_file(self, signals):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M')
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open(f'signals_{timestamp}.json', 'w', encoding='utf-8') as f:
            json.dump(signals, f, ensure_ascii=False, indent=2)
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        with open('latest_signals.json', 'w', encoding='utf-8') as f:
            json.dump(signals, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üíæ –°–∏–≥–Ω–∞–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: signals_{timestamp}.json")
    
    def run_analysis(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        try:
            # –°–æ–±–∏—Ä–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            all_signals = self.collect_all_signals()
            
            if not all_signals:
                logger.warning("‚ö†Ô∏è –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã
            self.save_signals_to_file(all_signals)
            
            # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç (—Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –æ–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–µ–µ)
            message = self.format_telegram_message(all_signals)
            if message:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                if len(message) > 4000:
                    # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                    self.send_long_message(message)
                else:
                    self.send_telegram_message(message)
                    
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å {len(all_signals)} —Å–∏–≥–Ω–∞–ª–∞–º–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            critical_signals = [
                s for s in all_signals 
                if s['signal'] in ['STRONG_BUY', 'STRONG_SELL'] or 
                (s.get('change_1h', 0) and abs(float(str(s['change_1h']).replace('%', ''))) > 10)
            ]
            
            if critical_signals:
                critical_message = self.format_critical_alerts(critical_signals)
                if critical_message and critical_message != message:  # –ù–µ –¥—É–±–ª–∏—Ä—É–µ–º
                    time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    self.send_telegram_message(critical_message)
                    logger.info(f"üö® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã: {len(critical_signals)}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            self.update_processed_signals_cache(all_signals)
            self.save_processed_signals()
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
            logger.error(error_msg)
            self.send_telegram_message(f"üö® *–û—à–∏–±–∫–∞ –±–æ—Ç–∞:*\n{error_msg}")
    
    def send_long_message(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏"""
        max_length = 3900  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
        parts = []
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Å–µ–∫—Ü–∏—è–º
        sections = message.split('\n\n')
        current_part = ""
        
        for section in sections:
            if len(current_part + section + '\n\n') <= max_length:
                current_part += section + '\n\n'
            else:
                if current_part:
                    parts.append(current_part.strip())
                current_part = section + '\n\n'
        
        if current_part:
            parts.append(current_part.strip())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ —Å –ø–∞—É–∑–∞–º–∏
        for i, part in enumerate(parts):
            header = f"üìä *–û–¢–ß–ï–¢ {i+1}/{len(parts)}*\n\n" if len(parts) > 1 else ""
            self.send_telegram_message(header + part)
            if i < len(parts) - 1:  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
                time.sleep(3)
    
    def format_critical_alerts(self, critical_signals):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã"""
        if not critical_signals:
            return None
            
        message = f"üö® *–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ê–õ–ï–†–¢–´* {datetime.now().strftime('%H:%M')}\n\n"
        
        for signal in critical_signals[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 –∞–ª–µ—Ä—Ç–æ–≤
            emoji = self.signal_emojis.get(signal['signal'], '‚ö™')
            
            if signal['signal'] in ['STRONG_BUY', 'STRONG_SELL']:
                message += f"{emoji} *{signal['signal']}*: {signal.get('symbol', 'N/A')}\n"
                
                if 'advice' in signal:
                    message += f"üí° {signal['advice']}\n"
                elif 'signal_reason' in signal:
                    message += f"üí° {signal['signal_reason']}\n"
                    
                if 'price' in signal:
                    message += f"üí∞ –¶–µ–Ω–∞: {signal['price']}\n"
                    
                message += "\n"
        
        return message if len(message) > 50 else None
    
    def update_processed_signals_cache(self, signals):
        """–û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)"""
        # –í —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç—ã –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        # –ü–æ—ç—Ç–æ–º—É –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Ç–∞–∫ —Å—Ç—Ä–æ–≥–æ
        pass

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TradingSignalBot()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
    logger.info("üîå –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
    test_message = f"ü§ñ *–†–ê–°–®–ò–†–ï–ù–ù–´–ô –ë–û–¢ –¢–û–†–ì–û–í–´–• –°–ò–ì–ù–ê–õ–û–í –ó–ê–ü–£–©–ï–ù!*\n\n‚è∞ {datetime.now().strftime('%H:%M %d.%m.%Y')}\n\nüìä –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n‚Ä¢ –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å RSI –∏ –æ–±—ä–µ–º–∞–º–∏\n‚Ä¢ –ì–æ—Ä—è—á–∏–µ —Å–∏–≥–Ω–∞–ª—ã –∏ –∞–ª–µ—Ä—Ç—ã\n‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ BTC/ETH\n‚Ä¢ DeFi –º–µ—Ç—Ä–∏–∫–∏ –∏ –¥–æ–º–∏–Ω–∞—Ü–∏—è Bitcoin\n‚Ä¢ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä—ã–Ω–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n\nüöÄ *–ü–µ—Ä–≤—ã–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...*"
    
    if bot.send_telegram_message(test_message):
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram!")
        return
    
    if os.getenv('GITHUB_ACTIONS'):
        # –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –≤ GitHub Actions
        logger.info("üöÄ GitHub Actions —Ä–µ–∂–∏–º - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫")
        time.sleep(30)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        bot.run_analysis()
    else:
        # –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        logger.info("üîÑ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç")
        time.sleep(30)  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        
        while True:
            try:
                bot.run_analysis()
                logger.info("üò¥ –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (30 –º–∏–Ω—É—Ç)...")
                time.sleep(1800)  # 30 –º–∏–Ω—É—Ç = 1800 —Å–µ–∫—É–Ω–¥
            except KeyboardInterrupt:
                logger.info("üëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
                bot.send_telegram_message("üõë *–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ! üëã")
                break
            except Exception as e:
                error_msg = f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
                logger.error(error_msg)
                bot.send_telegram_message(f"üö® *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞:*\n{error_msg}\n\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç...")
                time.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º

if __name__ == "__main__":
    main()
